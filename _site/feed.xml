<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JY Blog</title>
    <description>Every failure is leading towards success.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 23 Aug 2024 17:05:35 +0800</pubDate>
    <lastBuildDate>Fri, 23 Aug 2024 17:05:35 +0800</lastBuildDate>
    <generator>Jekyll v4.3.3</generator>
    
      <item>
        <title>Byte Stream</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;h2 id=&quot;main-content&quot;&gt;Main Content&lt;/h2&gt;
&lt;h3 id=&quot;big-endian-and-little-endian&quot;&gt;Big Endian and Little Endian&lt;/h3&gt;
&lt;p&gt;Big Endian and Little Endian define how data is stored in physical memory. For example, storing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt;: 0X 12 34 56 78&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Big Endian&lt;/strong&gt;: The most significant byte is stored at the smallest memory address.
In memory, it looks like: 12 34 56 78 (smallest address on the left)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Little Endian&lt;/strong&gt;: The most significant byte is stored at the largest memory address.
In memory, it looks like: 78 56 34 12&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since data storage is byte-oriented (each address can store one byte), converting between Big Endian and Little Endian only requires reversing the byte order.&lt;/p&gt;

&lt;p&gt;It is worth noting that data types such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;short&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt; are affected by endianness. The storage of strings (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;) is not affected. Additionally, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;char&lt;/code&gt; is not affected because it only occupies one byte.&lt;/p&gt;

&lt;h3 id=&quot;network-byte-order&quot;&gt;Network Byte Order&lt;/h3&gt;
&lt;p&gt;Different machines may use different endianness definitions. Intel X86 architecture uses Little Endian, while ARM architecture CPUs use Big Endian. How can we ensure that data transmission between different machines does not cause errors?&lt;/p&gt;

&lt;p&gt;The UDP/TCP/IP protocols stipulate: treat the first received byte as the most significant byte, which means using Big Endian for data transmission.&lt;/p&gt;

&lt;h3 id=&quot;data-streams-in-c&quot;&gt;Data Streams in C#&lt;/h3&gt;
&lt;p&gt;C# provides &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MemoryStream&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BinaryWriter&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BinaryReader&lt;/code&gt; as tools for reading and writing byte streams. However, it is worth noting that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BinaryWriter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BinaryReader&lt;/code&gt; do not consider network byte order during read/write operations. Unlike Java’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ByteBuffer&lt;/code&gt;, which handles this internally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;byte[] byteArray = new byte[] { 0x00, 0x00, 0x00, 0x01 };

using (MemoryStream msIn = new MemoryStream(byteArray))
using (BinaryReader brIn = new BinaryReader(msIn)){
    var result = brIn.ReadInt32();
    Console.Write(result);
}

// output: 16777216
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above code, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byteArray&lt;/code&gt; represents an Int32 of 1 in Big Endian format. If a 1 is received over the network, this is the data we get. But BinaryReader defaults to the machine’s storage format, which is Little Endian, so the output is the interpretation of 0x 01 00 00 00: 16777216.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;Int32 a = 1;
byte[] byteArray;

using (MemoryStream msIn = new MemoryStream(32))
using (BinaryWriter writer = new BinaryWriter(msIn, Encoding.UTF8)){
    writer.Write(a);
    byteArray = msIn.ToArray();
}

foreach (byte b in byteArray)
    Console.Write(b + &quot; &quot;);

// output: 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, writing numbers to a byte stream using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BinaryWriter&lt;/code&gt; will produce similar issues. In the above code, the number 1 is written in Little Endian format.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;long a = 1;
var ret = BitConverter.GetBytes(a);

foreach (var c in ret)
    Console.Write($&quot;   {c}&quot;);
// output: 1 0 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BitConverter&lt;/code&gt; behaves the same way.
To address this issue, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IPAddress.HostToNetworkOrder&lt;/code&gt;, or manually use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Array.Reverse&lt;/code&gt; to reverse the byte order.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;https://www.cnblogs.com/ArrozZhu/p/8384218.html&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Aug 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/08/09/Byte_Stream/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/08/09/Byte_Stream/</guid>
        
        <category>Data Stream</category>
        
        <category>C#</category>
        
        
      </item>
    
      <item>
        <title>客户端与服务器</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;在 &lt;strong&gt;游戏架构：ECS&lt;/strong&gt; 博客中，介绍了一个游戏系统是如何运行的。但这只适用于单机游戏，如果游戏需要接入服务器呢？客户端与服务器需要以什么样的形式进行沟通？&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;理想状态下，假设服务器有无限的性能，所有游戏的逻辑都由服务器计算，只需要服务器把数据传输到客户端进行播放。这减轻了客户端的负担，不再需要高性能CPU和GPU，也杜绝了任何外挂，毕竟为了外挂入侵服务器也太小题大做了。&lt;/p&gt;

&lt;p&gt;但通常来说，客户端会承担一部分的游戏逻辑。如果全权由服务器负责运算，处理量过于庞大，特别是LOL这类大型网游，可能同时有几万盘游戏在同时运行，同时也可能导致游戏的延迟问题。这也就导致外挂由可乘之机。就拿最普遍的FPS游戏来说，射击的计算一般是放在客户端处理的，如果在服务器计算，再穿回本地，会导致严重的延迟，比如你看到自己开了一枪，但是过了半秒，子弹才射出去。而外挂可以通过修改客户端的数据，比如子弹的位置，来进行作弊，也就是常说的魔术子弹。&lt;/p&gt;

&lt;p&gt;当然，游戏可以通过定期检查服务器数据，或是反作弊插件检测是否有修改行为。但这些说到底只是增加了外挂的成本，无法真正杜绝。毕竟机器在玩家的手上，玩家有绝对的控制。反作弊软件再厉害，也无法访问底层内存，但玩家可以，这也就是DMA（Direct Memory Access）外挂，通过直接访问和修改内存进行作弊。&lt;/p&gt;

&lt;h3 id=&quot;如何沟通&quot;&gt;如何沟通？&lt;/h3&gt;

&lt;p&gt;一个游戏会有一个CoreGame，也就是游戏的核心逻辑。这个逻辑正是通过ECS架构构造的。&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Aug 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/08/02/%E6%B8%B8%E6%88%8F%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/08/02/%E6%B8%B8%E6%88%8F%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
        
        <category>Unity</category>
        
        <category>C#</category>
        
        <category>游戏开发</category>
        
        
      </item>
    
      <item>
        <title>游戏架构：ECS</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;最近在实习中接触到了很多游戏相关的架构和知识，其中就包括了ECS架构。但知识多且有些分散，故此梳理一下。&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;h3 id=&quot;ecs简介&quot;&gt;ECS简介&lt;/h3&gt;
&lt;p&gt;大型项目中，用的最多的应该是ECS架构（Entity Component System）&lt;/p&gt;

&lt;p&gt;ECS，顾名思义，就是由Entity，Component和System组成的结构。当然，实际情况复杂得多，但核心仍是这三个概念：&lt;/p&gt;

&lt;h4 id=&quot;entity&quot;&gt;Entity：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;一个游戏object或者concept&lt;/li&gt;
  &lt;li&gt;包含一个ID，唯一的标识符&lt;/li&gt;
  &lt;li&gt;自身没有逻辑或者数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;component&quot;&gt;Component：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;纯数据，没有逻辑&lt;/li&gt;
  &lt;li&gt;代表entity的一个特征&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;system&quot;&gt;&lt;strong&gt;System：&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;包揽逻辑，一个system通常处理特定的Component&lt;/li&gt;
  &lt;li&gt;System 通常由游戏循环驱动来修改游戏对象的状态&lt;/li&gt;
  &lt;li&gt;遍历entity并更新他们的状态
&lt;!-- - System中的`OnProcess` or `ProcessList`将会在` game loop中被调用，而不是直接call --&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举个例子来说，entity可以是游戏中的玩家，Component就是玩家的各个属性，比如生命值，体力值，蓝量等。System则对Component进行处理，最常见的System就是游戏中的物理系统，每过一段时间，这个系统就需要检测并更新代表玩家的位置的Component。&lt;/p&gt;

&lt;h3 id=&quot;为什么要用ecs&quot;&gt;为什么要用ECS？&lt;/h3&gt;
&lt;p&gt;为什么要用ECS，而不是传统的OOP进行游戏开发？（守望先锋 Overwatch正是使用ECS的一个例子）简单来说，ECS在游戏开发方面，具有性能和语言简洁的优势：&lt;/p&gt;

&lt;h4 id=&quot;方便管理&quot;&gt;方便管理&lt;/h4&gt;
&lt;p&gt;一个简单的例子：游戏需要几个敌人：坦克，步兵和幽灵。假如我们使用OOP，这三种敌人都会继承于Enemy类。但是，幽灵是没有碰撞体积的，这就和Enemy类里带有的碰撞体积相冲突了。而如果使用ECS，我们只需要不给幽灵这个Entity 碰撞体积 这个component，问题就解决了了&lt;/p&gt;

&lt;p&gt;当然，这和情况下，我们也可以通过把鬼魂的碰撞体积设置成0来解决。这甚至更加简单，OOP在小型项目中确实有不错的表现。但是想想这样一个情况：游戏中需要添加新的敌人：幽灵步兵。它和普通步兵一样，但是没有碰撞体积。在OOP中，这个entity只能继承与步兵类，毕竟他和步兵有很多相似。而至于幽灵的逻辑？只能够从幽灵类中复制然后黏贴了。更不用提当项目变大，游戏中有上百个entity，每个entity有几十个Component的时候了。&lt;/p&gt;

&lt;!-- 而在ECS中，你只需要把步兵的Component（射击，渲染）和幽灵的Component（碰撞体积）一并添加给entity就好了。 --&gt;

&lt;h4 id=&quot;性能优势&quot;&gt;性能优势&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;增加CPU缓存命中，提升性能&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Entity和System并不会保存数据，也就是说数据全权由Component负责。同一种Component的数据回储存在硬盘上相邻的位置（尽管可能属于不同的Entity），这就使得CPU访问它们十分高效。这是因为CPU的cache缓存机制，每次从硬盘上读取数据不仅会读取那个特定地址的数据，相邻位置的数据也会一并被读取。&lt;/p&gt;

&lt;p&gt;举个例子，物理System需要对游戏内所有entity的位置进行更新：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# OOP:
for entity in entities:
    if entity.Physics != None:
        entity.Physics.Update()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ECS
for component in physicsComponents:
    component.Update()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;很显然，ECS避免了对所有entity的遍历。而OOP不仅不要遍历的entity更多，需要访问的数据实际上分布在内存个不同地方，地址的来回跳转会消耗大量的时间。&lt;/p&gt;

&lt;p&gt;在更加底层，ECS使用了内存对齐和Entity内存分布器，Chunk等设计来优化内存管理，这里就不展开了。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;数据和逻辑解耦&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;正如上面提到的，Component负责数据，而System负责逻辑，这就达成了数据和逻辑的解耦。这使得多核CPU并行处理时更加方便，不同的系统可以并行处理不同的组件数据。&lt;/p&gt;

&lt;h3 id=&quot;ecs-如何运行一个游戏&quot;&gt;ECS 如何运行一个游戏&lt;/h3&gt;

&lt;p&gt;游戏一般是由一个主循环驱动，每一帧调用Update函数对游戏进行更新。游戏更新，说白了，其实就是System的更新，因为它包含了所有的逻辑，调用他们对数据，也就是Component进行更改就好了&lt;/p&gt;

&lt;h4 id=&quot;system的分类&quot;&gt;System的分类&lt;/h4&gt;
&lt;p&gt;System一般分为两种，React System和Update System。而不管哪一种Sytem，都有两个必要的函数：Process() 和 OnProcess()。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OnProcess接收一个Entity对象，它将对一个Entity的特定Component进行修改更新。&lt;/li&gt;
  &lt;li&gt;Process则是更新整个系统，他会对所有需要更新Entity调用OnProcess。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UpdateSystem，代表需要定时更新的系统，比如 生命恢复，或者物理系统。这种系统一般是对所有具有特定Component的Entity进行更新，所以找出所有这样的Entity，并调用OnProcess即可&lt;/p&gt;

&lt;p&gt;ReactSystem，代表特定条件触发的系统，所以哪个Entity需要进行更新是由其他因素决定的。这类系统会储存一个 _listCache，来储存需要更新的Entity。&lt;/p&gt;

&lt;h3 id=&quot;客户端与服务器&quot;&gt;客户端与服务器&lt;/h3&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;https://blog.csdn.net/u012861978/article/details/132397770&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Aug 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/08/01/%E5%85%B3%E4%BA%8EUnity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%86%E8%A7%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/08/01/%E5%85%B3%E4%BA%8EUnity%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%86%E8%A7%A3/</guid>
        
        <category>Unity</category>
        
        <category>C#</category>
        
        <category>游戏开发</category>
        
        
      </item>
    
      <item>
        <title>Omnigame Internship</title>
        <description>&lt;h1 id=&quot;project-summary&quot;&gt;Project Summary&lt;/h1&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This project involved various aspects of software development, focusing on game development, server management, and advanced programming concepts. The work encompassed a broad range of tasks, from setting up and managing servers to developing game logic and integrating various tools and technologies.&lt;/p&gt;

&lt;h2 id=&quot;key-accomplishments&quot;&gt;Key Accomplishments&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Data Analysis&lt;/strong&gt;: Utilized tools like Python and MongoDB to analyze and manage data effectively.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AWS Management&lt;/strong&gt;: Implemented and managed AWS resources to ensure smooth server operations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Server Updates&lt;/strong&gt;: Regularly updated server configurations and handled HTTP requests efficiently.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Client and Server Interaction&lt;/strong&gt;: Developed mechanisms for seamless communication between the client and server, ensuring robust and reliable data exchange.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Game Development&lt;/strong&gt;: Worked on enhancing game features using the Entity Component System (ECS) architecture for better performance and scalability.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tool Integration&lt;/strong&gt;: Successfully integrated various development tools, including Unity, Rider, and Perforce, to streamline the workflow and enhance productivity.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Protobuf and RPC&lt;/strong&gt;: Utilized Protobuf for defining data structures and Remote Procedure Call (RPC) for efficient communication between different components.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;important-learnings&quot;&gt;Important Learnings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Effective Data Management&lt;/strong&gt;: Leveraging modern tools for data analysis and management can significantly improve efficiency.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cloud Services&lt;/strong&gt;: Proper use of cloud services like AWS is crucial for maintaining scalable and reliable server infrastructure.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Modular Architecture&lt;/strong&gt;: Adopting ECS and other modular approaches enhances the flexibility and performance of game development projects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tool Integration&lt;/strong&gt;: Seamless integration of development tools can greatly streamline the development process and reduce overhead.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Communication Protocols&lt;/strong&gt;: Understanding and implementing communication protocols such as RPC is essential for robust client-server interactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The project provided a comprehensive experience in managing and developing large-scale software systems. The key takeaway is the importance of efficient data management, scalable infrastructure, and robust communication protocols. By integrating various tools and adopting modular architectures, the project achieved significant improvements in performance and productivity.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Jul 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/07/02/omnigame/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/07/02/omnigame/</guid>
        
        <category>C#</category>
        
        <category>Unity</category>
        
        <category>Internship</category>
        
        
      </item>
    
      <item>
        <title>Cooperator - Fully automated github repo translator</title>
        <description>&lt;h1 id=&quot;localizing-github-repositories-with-llms&quot;&gt;Localizing GitHub Repositories with LLMs&lt;/h1&gt;

&lt;p&gt;Many established software teams work across multiple locations, basing their work on GitHub repositories. Such teams consist of people across different languages and cultures.&lt;/p&gt;

&lt;p&gt;It is common practice for large repositories to undergo localization procedures, which involves translating documentation files in such a way that preserve the context of work.&lt;/p&gt;

&lt;p&gt;For example, if you had the following Python code in English:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# test the Python print function
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would look like this in French:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# tester la fonction print en Python
&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bonjour le monde&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this is a simple example, there exist small nuances that require us to pay attention to the context of the example. For example, the Python function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; cannot be translated into another language. The hash (#), that denotes the comment also has to be left unmodified even during the translation. Paying attention to small details is not something conventional machine translation methods (used in tools such as Google Translate) are developed for.&lt;/p&gt;

&lt;p&gt;Given the nature of this work, localization is not a trivial task. At Microsoft, there are localization teams hired to produce culturally and professionally accurate versions of documentation, reports, and guides for codebases. Tasks like these can take up to several months to finish.&lt;/p&gt;

&lt;p&gt;Fortunately, this task is something large language models (LLMs) excel at compared to machine translation, as they process tokens of text in a context window. LLMs use attention mechanisms to weigh the relevance of each token relative to others in the sequence, allowing them to capture nuanced meanings and contextual dependencies effectively.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/cooperator/adv_of_lms.png&quot; alt=&quot;advantages of lm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our team at Imperial College London has worked with Microsoft to realize the potential of LLMs in the localization process, including noting any interesting behaviors and useful takeaways of what is currently possible with existing technologies provided by Azure and OpenAI.&lt;/p&gt;

&lt;h2 id=&quot;introducing-a-proof-of-concept-github-app&quot;&gt;Introducing a Proof-of-Concept GitHub App&lt;/h2&gt;

&lt;p&gt;As part of the project, our team built a simple GitHub app based off Django and React, with the former framework utilizing Python to quickly build and iterate an app that would look for a configuration file on an installed GitHub repository, and then Markdown files on the repo.&lt;/p&gt;

&lt;p&gt;The app opts for a simple configuration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We use English as the universal language (although theoretically, we can have this set to any other language). Any translations made by the app are stored in a separate branch that follows the main branch. Every time main is updated by the user, the app pushes to the translation branch and makes a PR to main.&lt;/li&gt;
  &lt;li&gt;A yml configuration file lists the directory of the documentation folder and the desired languages to be translated into.&lt;/li&gt;
  &lt;li&gt;Any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; files in the repository are automatically translated – the translated READMEs are placed in a folder of translations adjacent to the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; file in English.&lt;/li&gt;
  &lt;li&gt;All markdown files in the documentation directory are automatically translated. The documentation directory also contains translation folders by language. Each translation folder mirrors the structure of the documentation directory in English.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/project_root
    /docs
        /installation.md
        /screenshot.png
        /api
            /services.md
        /usage.md
        /fr
            /installation.md
            /usage.md
            /api
                /services.md
        /es
            /installation.md
            /usage.md
            /api
                /services.md
        /translated_images
            /screenshot&amp;lt;hash&amp;gt;.fr.png
            /screenshot&amp;lt;hash&amp;gt;.es.png
    /src
        /readme.md
        /readme_img.png
        /translations
            /readme.fr.md
            /readme.es.md
        /translated_images
            /readme_img&amp;lt;hash&amp;gt;.fr.png
            /readme_img&amp;lt;hash&amp;gt;.es.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/cooperator/app_structure.png&quot; alt=&quot;app structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;properly-translating-a-markdown-file&quot;&gt;Properly Translating a Markdown File&lt;/h2&gt;

&lt;p&gt;There are three aspects to translating a markdown file:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting the text translations correct&lt;/li&gt;
  &lt;li&gt;Getting the code block translations precise&lt;/li&gt;
  &lt;li&gt;Translating the images in the Markdown file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;text-translation&quot;&gt;Text Translation&lt;/h3&gt;

&lt;p&gt;This was a relatively straightforward task requiring minimal prompting – our tests with GPT models were generally very accurate (even with RTL languages like Arabic). At the time of testing, GPT-4o and GPT-4 were accurate most of the time for high-resource languages and performed moderately on low-resource languages. GPT-3.5 performed adequately for common high-resource languages but struggled with low-resource languages.&lt;/p&gt;

&lt;p&gt;This article covers a deeper definition of low-resource languages, which tend to be less commonly spoken in the world. Naturally, there is a lack of training data in such low-resource languages used to train language models, which leads to poorer performance in tasks that involve low-resource languages compared to completing tasks in high-resource languages. This behavior is observed in many leading LLMs today, such as from Claude, Llama, Mistral, and GPT. There exist initiatives such as Cohere for AI that try to solve the low-resource language problem with dedicated multilingual models such as Aya, but they are out of the scope of this article.&lt;/p&gt;

&lt;h3 id=&quot;code-block-translation&quot;&gt;Code Block Translation&lt;/h3&gt;

&lt;p&gt;To our surprise, translating code blocks in Markdown came naturally to most LLMs. Since a lot of training data for GPTs consist of a lot of code, the GPT models perform very well on translating comments while preserving the structure of code syntax in code blocks.&lt;/p&gt;

&lt;h3 id=&quot;image-translation&quot;&gt;Image Translation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/cooperator/image_translation.png&quot; alt=&quot;app structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Markdown files can contain images – in most cases these images are stored locally within the repository. All the images in the repository get translated and their translated copies are stored within the repo, and then after the Markdown files are translated, regex is used to find all image links and replace them with their translated variants.&lt;/p&gt;

&lt;p&gt;Current state of the art diffusion cannot be reliably prompted to generate translated versions of images due to their probabilistic nature – they are good at generating new images from scratch but cannot imitate the structure of previous images.&lt;/p&gt;

&lt;p&gt;Generating new images would also be computationally expensive, so we developed a novel way of using a mix of OCR services and GPT models to translate images:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use Azure’s Image Analysis API to detect text lines and their bounding boxes&lt;/li&gt;
  &lt;li&gt;Feed the detected text lines into GPT to be translated&lt;/li&gt;
  &lt;li&gt;Replace each text line with translated variant&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is not a perfect solution, but text replacement works. It was also agreed with our supervisor that overlaying text would be more legally feasible because there was no generation of new images of similar likeness, which carries copyright implications.&lt;/p&gt;

&lt;h2 id=&quot;more-detailed-information-about-the-app&quot;&gt;More Detailed Information about the App&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Django backend, React frontend&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;translation-process&quot;&gt;Translation Process&lt;/h3&gt;
&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;
&lt;p&gt;Users start by installing GitHub app on repositories or organization selected, those repositories will be recorded in SQLite database, and displayed on webpage once you logged in. A robot account will be invited to those repositories.&lt;/p&gt;

&lt;h4 id=&quot;initial-translation&quot;&gt;Initial Translation&lt;/h4&gt;
&lt;p&gt;Once you activate translation on webpage, a new branch “co-op-translator” will be created, then all document files/images will be read and translated by backend server, then uploaded to the new branch. Pull request will then be created from “co-op-translator” to main branch. Note that all changes to repositories will be performed by the robot account, as it’s easier to manage.&lt;/p&gt;

&lt;h4 id=&quot;tracking-stage&quot;&gt;Tracking Stage&lt;/h4&gt;
&lt;p&gt;Repositories will be further tracked. GitHub app is subscribed to events (main branch update, delete of pull requests), modified or added document in new commit will be translated and updated on the “co-op-translator” branch, old pull request will be replaced by a new one.&lt;/p&gt;

&lt;h3 id=&quot;edge-cases-and-interesting-behavior&quot;&gt;Edge Cases and Interesting Behavior&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fixed:&lt;/strong&gt; The GPT model would hallucinate translated short 1-liner markdown files:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;INPUT:&lt;/strong&gt;
        &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Example Hello World in Markdown&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;OUTPUT (translated into Spanish):&lt;/strong&gt;
        &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Ejemplo de &quot;Hello World&quot; en Markdown&lt;/span&gt;
    
Este es un archivo &lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;README.md&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt; simple para demostrar el formato de Markdown en GitHub.
    
&lt;span class=&quot;gu&quot;&gt;## Características&lt;/span&gt;
    
Este documento incluye:
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; Etiquetas de &lt;span class=&quot;gs&quot;&gt;**encabezado**&lt;/span&gt; (&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;#&lt;span class=&quot;se&quot;&gt;\`&lt;/span&gt;)
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;gs&quot;&gt;**Bloque de código**&lt;/span&gt; para resaltado de sintaxis
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; Formato en &lt;span class=&quot;gs&quot;&gt;**negrita**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We tried to prompt the model with the prompt:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;“NEVER ADD ANY EXTRA CONTENT OUTSIDE THE TRANSLATION. TRANSLATE ONLY WHAT IS GIVEN TO YOU. MAINTAIN MARKDOWN FORMAT”
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This worked, but the model would fail to translate longer files properly. So, we have a dynamic prompt – for files with less than 2 lines, we use the prompt for shorter files, and for files with more than 2 lines, we use the original prompt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Issues in Image Context:&lt;/strong&gt; Sometimes due to the way image text is extracted, they are parsed line by line in order of appearance from left to right, then top to bottom. However, this order might not reflect the structure of objects in the text, and sometimes context can be confusing to the model as it has no spatial awareness of the text.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Example Image, two cards of text:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/cooperator/two_cards.png&quot; alt=&quot;app structure&quot; /&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Extracted Text (-&amp;gt; French translation)
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Section 1: -&amp;gt; Section 1:
Section 2: -&amp;gt; Section 2:
My favourite tech -&amp;gt; Ma technologie préférée
My favourite fruit -&amp;gt; Mon fruit préféré:
company: Apple -&amp;gt; société: Apple
: Apple -&amp;gt; : Apple? Pomme?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Expected Output
&lt;img src=&quot;http://localhost:4000/assets/cooperator/expected_output.png&quot; alt=&quot;app structure&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Actual Output (using line to line replacement)
&lt;img src=&quot;http://localhost:4000/assets/cooperator/actual_output.png&quot; alt=&quot;app structure&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the translation of “Apple” could be confused between either the company name in French (also called Apple), or the fruit (pomme). Note that there is also a small grammatical error as ‘tech company’ has been split up, so the context has lost track of the lines. This is because ‘tech company’ is reversed in French to be ‘société tech’ or ‘company tech’.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Take this example, of a Microsoft Guide for Generative AI in English. This is the app’s translated French version. Note that translations do not work with externally linked images.&lt;/p&gt;
</description>
        <pubDate>Thu, 02 May 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/05/02/Cooperator/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/05/02/Cooperator/</guid>
        
        <category>Django</category>
        
        <category>Sqlite</category>
        
        <category>LLM</category>
        
        <category>Azure</category>
        
        <category>Github</category>
        
        <category>Project</category>
        
        
      </item>
    
      <item>
        <title>Machine Learning Internship</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;paper-published&quot;&gt;Paper Published&lt;/h3&gt;
&lt;p&gt;The research paper is published on DATE. You can view the paper &lt;a href=&quot;https://arxiv.org/abs/2406.03088&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jul 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/07/01/Deepwok-Lab/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/07/01/Deepwok-Lab/</guid>
        
        <category>Pytorch</category>
        
        <category>Machine Learning</category>
        
        <category>Internship</category>
        
        
      </item>
    
      <item>
        <title>Multiplayer Online Game Controlled by FPGA</title>
        <description>&lt;h1 id=&quot;information-processing-report&quot;&gt;Information Processing Report&lt;/h1&gt;

&lt;h2 id=&quot;purpose-of-the-system&quot;&gt;Purpose of the System&lt;/h2&gt;

&lt;p&gt;Our aim was to create an engaging multiplayer game using FPGAs as direction controllers. By leveraging AWS servers, local FPGA processing, and Unity infrastructure, the team developed a cooperative 2D competitive game.&lt;/p&gt;

&lt;h2 id=&quot;game-description&quot;&gt;Game Description&lt;/h2&gt;

&lt;p&gt;We developed a co-op real-time multiplayer game on Unity using C#.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The game supports two players in real-time on the same laptop, and is highly scalable to accommodate more players with additional control nodes.&lt;/li&gt;
  &lt;li&gt;The objective is to fight against a randomly spawned monster. Players must work together to defeat the monster, and the game finish if any player dies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We aim to replicate the console multiplayer gaming experience, similar to playing a multiplayer game on one PlayStation.&lt;/p&gt;

&lt;h2 id=&quot;performance-metrics&quot;&gt;Performance Metrics&lt;/h2&gt;

&lt;h3 id=&quot;low-latency&quot;&gt;Low Latency&lt;/h3&gt;

&lt;p&gt;We used the UDP communication protocol and a low sample rate in data transmission to reduce latency. The delay between an FPGA command and its implementation in the game is about 300ms, enhancing the user experience.&lt;/p&gt;

&lt;h3 id=&quot;high-accuracy&quot;&gt;High Accuracy&lt;/h3&gt;

&lt;p&gt;We added an FIR filter to reduce noise and set an optimal range for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data_y&lt;/code&gt; to decide the moving direction.&lt;/p&gt;

&lt;h3 id=&quot;multiplayer-cooperative-game&quot;&gt;Multiplayer Cooperative Game&lt;/h3&gt;

&lt;p&gt;Using the AWS server, we transmit information to the Unity Computer to display both players’ real-time control on the same screen, mimicking the experience of a PS5 or Nintendo Switch.&lt;/p&gt;

&lt;h3 id=&quot;high-flexibility-in-moving-direction&quot;&gt;High Flexibility in Moving Direction&lt;/h3&gt;

&lt;p&gt;Players can control their game character in the X, Y, and diagonal directions.&lt;/p&gt;

&lt;h2 id=&quot;design-decisions&quot;&gt;Design Decisions&lt;/h2&gt;

&lt;p&gt;We split our project into three stages:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;FPGA design and data processing&lt;/li&gt;
  &lt;li&gt;Server-side design&lt;/li&gt;
  &lt;li&gt;Unity game development&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We allocated team members to each stage based on their specialized knowledge to work simultaneously.&lt;/p&gt;

&lt;h2 id=&quot;fpga-design-and-data-processing&quot;&gt;FPGA Design and Data Processing&lt;/h2&gt;

&lt;h3 id=&quot;using-fir-filtered-data&quot;&gt;Using FIR-Filtered Data&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define N 49 
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COEFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0046&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0074&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0071&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0033&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0044&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0133&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;017&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0223&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0225&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;010&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0263&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;033&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0752&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1204&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2879&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6369&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2879&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1204&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;02&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0752&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;033&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0263&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;010&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0225&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0223&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0011&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;017&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0133&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0044&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0040&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;94&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0033&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0071&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0074&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0046&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 

&lt;span class=&quot;cp&quot;&gt;#define OFFSET -32 
#define PWM_PERIOD 16 
#define QUITLETTER &apos;~&apos; 
#define CHARLIM 64 
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alt_32&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;firFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alt_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alt_32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;alt_32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
   &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;alt_32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

 &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We used FIR-filtered data rather than raw data to reduce errors. MATLAB produces the 49 coefficients. The function takes an array of samples, the number of samples (`n`), and a new input value. It returns the filtered output value. Despite adding filters increasing latency, the rest of the system’s latency optimizations keep it low, so we retained the filter for its noise-reduction performance.&lt;/p&gt;

&lt;h3 id=&quot;implementing-the-seven-segment-display&quot;&gt;Implementing the Seven-Segment Display&lt;/h3&gt;

&lt;p&gt;```c
while(loop){ 
    printf(“&amp;lt;–&amp;gt; Please Type Your Username (6 bits maximum) and Press Enter: &amp;lt;–&amp;gt;\n”);&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char text[2*CHARLIM] = &quot;&quot;;  
char prevLetter = &apos;!&apos;; 
int length = 0; 
int running = 1; 
prevLetter = alt_getchar();   
prevLetter = get_text(prevLetter, &amp;amp;length, text, &amp;amp;running); 

IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBin(text[0])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBin(text[1])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBin(text[2])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBin(text[3])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBin(text[4])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBin(text[5]));

// print score 
char text[2*CHARLIM] = &quot;&quot;; 
char prevLetter = &apos;!&apos;; 
int length = 0; 
int running = 1; 
prevLetter = alt_getchar(); 
prevLetter = get_text(prevLetter, &amp;amp;length, text, &amp;amp;running); 

IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, getBin(text[0])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, getBin(text[1])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, getBin(text[2])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, getBin(text[3])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, getBin(text[4])); 
IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, getBin(text[5])); \`\`\`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We designed a seven-segment display that can show both characters and numbers. It is used in two parts of the game:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Displaying the username when the game starts.&lt;/li&gt;
  &lt;li&gt;Displaying the score when the game ends.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;implementing-the-button&quot;&gt;Implementing the Button&lt;/h3&gt;

&lt;p&gt;```c
button = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE); 
if(button == 0b10){//press key0 to stop 
 char stop=’a’;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;still_in_game = 0; // if will finish the game and print the mark 
alt_up_accelerometer_spi_read_x_axis(acc_dev, &amp;amp; x_read); 
alt_up_accelerometer_spi_read_y_axis(acc_dev, &amp;amp; y_read); 
alt_up_accelerometer_spi_read_z_axis(acc_dev, &amp;amp; z_read); 
x_read = firFilter(&amp;amp; samples_x, n, x_read); 
y_read = firFilter(&amp;amp; samples_y, n, y_read); 
z_read = firFilter(&amp;amp; samples_z, n, z_read); 
char x_dir, y_dir; 
x_dir = &apos;a&apos;; 
y_dir = &apos;a&apos;; 
alt_printf(&quot;%c%c\n&quot;, x_dir, y_dir);  } \`\`\`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pressing key 0 stops the game and displays the score on the screen.&lt;/p&gt;

&lt;h3 id=&quot;data-transmission-between-nios-and-python&quot;&gt;Data Transmission between Nios and Python&lt;/h3&gt;

&lt;p&gt;Motion data is collected and transmitted to Python for client-side processing. To address data transmission bottlenecks, we added a “usleep” function to create transmission time intervals, significantly improving performance and stability without compromising data.&lt;/p&gt;

&lt;p&gt;The command is executed as a bash call in an internally created bash system call using the Python subprocess library. Once the button is pressed, a string “aa” is sent from the Nios, and after receiving it, the running subprocess terminates and another opens in the `send_on_jtag1(cmd)` function to receive the returned data of the score from the database, which is then printed on the FPGA.&lt;/p&gt;

&lt;h2 id=&quot;server-and-database&quot;&gt;Server and Database&lt;/h2&gt;

&lt;h3 id=&quot;server&quot;&gt;Server&lt;/h3&gt;

&lt;p&gt;The server is set up on an AWS EC2 instance with Ubuntu 20.04. We chose AWS EC2 for its scalable and reliable infrastructure. Necessary software, including Apache web server, Python 3.8, and UMP, is installed. AWS CLI allows local database access.&lt;/p&gt;

&lt;h4 id=&quot;communication-protocol&quot;&gt;Communication Protocol&lt;/h4&gt;

&lt;p&gt;We tried several communication protocols:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Using DynamoDB had significant delay.&lt;/li&gt;
  &lt;li&gt;TCP reduced delay but still had 2-3 seconds delay.&lt;/li&gt;
  &lt;li&gt;UDP reduced delay to below 1 second.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We chose UDP for its low latency, essential for gaming.&lt;/p&gt;

&lt;h4 id=&quot;more-about-tcp-and-udp&quot;&gt;More about TCP and UDP&lt;/h4&gt;

&lt;p&gt;TCP’s reliability and connection-oriented properties add overhead, causing delays. UDP, being connectionless, transmits packets faster with lower latency, making it suitable for real-time applications like gaming. However, UDP’s lack of reliability can result in packet loss, leading to errors or glitches. Techniques like packet loss detection, error correction, and congestion control may be needed to improve performance.&lt;/p&gt;

&lt;h3 id=&quot;data&quot;&gt;Data&lt;/h3&gt;

&lt;p&gt;Our game is 2D, and the attack is automatic, so we only need to transmit players’ movement information. The FPGAs process and output data as two numbers representing vertical and horizontal velocities.&lt;/p&gt;

&lt;h4 id=&quot;python-code&quot;&gt;Python Code&lt;/h4&gt;

&lt;h5 id=&quot;connection&quot;&gt;Connection&lt;/h5&gt;

&lt;p&gt;```python
def init():  # connect and remember three clients 
    print(“initializing, please connect player1”) 
    msg1, add1 = server_socket.recvfrom(2048) 
    time.sleep(1)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(&quot;initializing, please connect player2&quot;) 
msg2, add2 = server_socket.recvfrom(2048) 
time.sleep(1) 

print(&quot;initializing, please connect destination&quot;) 
msg3, add3 = server_socket.recvfrom(2048) 
time.sleep(1) 

return add1, add2, add3 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;def connect():  # refuse and retry the connection when one player appears multiple times&lt;br /&gt;
    add1, add2, add3 = init() 
    if (add1 == add2): 
            print(“two player have the same address”) 
            add1, add2, add3 = init() 
    if (add1 == add3 or add2 == add3): 
            print(“destination and player have the same address”) 
            add1, add2, add3 = init() 
    return add1, add2, add3&lt;/p&gt;

&lt;p&gt;add1, add2, add3 = connect()
```&lt;/p&gt;

&lt;p&gt;This part of the code does the connection. Since we can’t know the public IP of clients, the server receives one message from each one of them and remembers the IP. If one IP appears multiple times, the server will refuse and retry the connection.&lt;/p&gt;

&lt;h5 id=&quot;transmitting&quot;&gt;Transmitting&lt;/h5&gt;

&lt;p&gt;```python
while True: 
    #cadd below is the client process address 
    cmsg, cadd = server_socket.recvfrom(2048) 
    cmsg = cmsg.decode() 
    id = cmsg[:2]  # get first 3 characters of string&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Information like scores and Health is transmitted using Database, so the transmission is one-way. We add a header in front of the message so that the game can distinguish between player1 and player2.

if (cadd == add1): 
    cmsg = &apos;C1:&apos; + cmsg 
    print(&quot;C1:&quot; + cmsg) 
    server_socket.sendto(cmsg.encode(), add3) 

if (cadd == add2): 
    cmsg = &apos;C2:&apos; + cmsg 
    print(&quot;C2:&quot; + cmsg) 
    server_socket.sendto(cmsg.encode(), add3) \`\`\`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;database&quot;&gt;Database&lt;/h3&gt;

&lt;p&gt;The game database is designed to store various game-related data for multiple users. The database is hosted on Amazon Web Services (AWS) DynamoDB, a NoSQL database service.&lt;/p&gt;

&lt;p&gt;Advantages of DynamoDB:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Handles different types of data regardless of structure, creating flexibility in an in-game server.&lt;/li&gt;
  &lt;li&gt;Low latency, ideal for our real-time multiplayer game server requiring fast response times.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The functionality of the game database includes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Retrieving player data:&lt;/strong&gt; The `get_player_data` function retrieves data for a given player ID.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Adding new players and their login data:&lt;/strong&gt; The `new_player_data` and `new_login_data` functions add new player data and login credentials, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Updating player data:&lt;/strong&gt; The `update_player_data` function updates the player data in the database.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Scanning tables:&lt;/strong&gt; The `show_table` function outputs all items of a specified table.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;test-for-latency&quot;&gt;Test for Latency&lt;/h4&gt;

&lt;p&gt;Latency consists of software and hardware parts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software Part:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```text
Protocol/delay  Test 1    Test 2    Test 3    Test 4    Test 5    Average
UDP             165ms     343.2ms   263ms     302.3ms   187.2ms   252.14ms
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hardware Part:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```text
Running 50 times:&lt;/p&gt;

&lt;p&gt;Average  Max       Min
0.62 ms  250.23 ms 0.53 ms
```&lt;/p&gt;

&lt;h3 id=&quot;unity-game-development&quot;&gt;Unity Game Development&lt;/h3&gt;

&lt;p&gt;To control the players’ movement, the FPGA output is parsed into two values and transmitted by UDP. Data collected from the UDP server is written in two txt files to control the player’s movement. After the game, the score is written in another txt file, updated in the database, and displayed on the FPGA.&lt;/p&gt;

&lt;p&gt;Testing flow involved unit tests for each component and iterative improvements while integrating them into the final system.&lt;/p&gt;

&lt;h2 id=&quot;link&quot;&gt;Link&lt;/h2&gt;

&lt;p&gt;To view the final system deliverable and demonstration, please refer to the video we have submitted with this coursework. It showcases live gameplay, along with commentary on the implementation. Group14&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://host.py/&quot;&gt;http://host.py/&lt;/a&gt;
&lt;a href=&quot;https://imperiallondon-my.sharepoint.com/:v:/g/personal/bz1521_ic_ac_uk/EQWuP7PvxvNBj7r5vfuSiUABnPlbUIslF7B5U7uDMGvb-w&quot;&gt;https://imperiallondon-my.sharepoint.com/:v:/g/personal/bz1521_ic_ac_uk/EQWuP7PvxvNBj7r5vfuSiUABnPlbUIslF7B5U7uDMGvb-w&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Mar 2023 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2023/03/02/Multiplayer-Online-Game-Controlled-by-FPGA/</link>
        <guid isPermaLink="true">http://localhost:4000/2023/03/02/Multiplayer-Online-Game-Controlled-by-FPGA/</guid>
        
        <category>C#</category>
        
        <category>Unity</category>
        
        <category>Python</category>
        
        <category>AWS</category>
        
        <category>Project</category>
        
        
      </item>
    
  </channel>
</rss>
